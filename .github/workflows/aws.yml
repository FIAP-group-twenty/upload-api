name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  sonarQube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SonarQube dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-cache
          restore-keys: |
            ${{ runner.os }}-sonar-cache

      - name: Install dependencies
        run: ./gradlew build --no-daemon

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar

      - name: Validate test coverage
        run: |
          coverage=$(curl -s "https://sonarcloud.io/api/measures/component?componentKey=group-twenty_upload-api&metricKeys=coverage" | jq -r '.component.measures[0].value')
          echo "Test coverage: $coverage"
          if (( $(echo "$coverage >= 50" | bc -l) )); then
          echo "Test coverage is sufficient: $coverage%"
          else
          echo "Test coverage is below 50%: $coverage%"
          exit 1
          fi

  build:
    needs: sonarQube
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Remover pacotes conflitantes
        run: |
          sudo apt-get remove -y docker docker-engine docker.io containerd runc

      - name: Instalar Docker com script oficial
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

      - name: Build da imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE }} .

      - name: Login no Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push da imagem para o Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_IMAGE }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Instalar AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configurar AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Atualizar contexto do kubectl para EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Atualizar deployment no EKS
        run: |
          kubectl set image deployment/upload-api upload-api=${{ secrets.DOCKER_IMAGE }}:latest